name: Frontend

on:
  pull_request:
    paths:
      - "frontend/**"
      - ".github/workflows/frontend.yml"

jobs:
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Set up Node 16
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Run lint
        run: npm run lint

  build-docker-image:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    env:
      ENV: test
      SQLALCHEMY_DATABASE_URI: postgresql://postgres:postgres@localhost:5432/db_test
    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Create a .env file
        run: env  > .env

      - name: Init variables
        id: vars
        run: |
          echo ::set-output name=image_name::$(echo "eu.gcr.io/$GITHUB_REPOSITORY/frontend")
          echo ::set-output name=tag::$(echo "${GITHUB_SHA:0:7}")

      - name: Build the Docker image
        run: docker build . --file dev.Dockerfile --tag ${{steps.vars.outputs.image_name}}:${{steps.vars.outputs.tag}}

      - name: Test the Docker image
        run: |
          CONTAINER_ID=$(docker run --rm -d -p 3000:3000  ${{steps.vars.outputs.image_name}}:${{steps.vars.outputs.tag}})

          # wait a few seconds before calling the root
          sleep 20 && CURL_OUTPUT=$(curl -isL localhost:3000/)
          docker stop "$CONTAINER_ID"

          # if curl is not 200, output the value and fail the step
          echo "$CURL_OUTPUT" | grep "200 OK" || (echo "$CURL_OUTPUT" && exit 1)
